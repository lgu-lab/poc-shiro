# SHIRO configuration file
# See http://shiro.apache.org/configuration.html and http://shiro.apache.org/web.html for more.

######################## MAIN ########################
[main]

shiro.loginUrl = /login.jsp

# Let's use some in-memory caching to reduce the number of runtime lookups against Stormpath.  A real
# application might want to use a more robust caching solution (e.g. ehcache or a distributed cache).  When using such
# caches, be aware of your cache TTL settings: too high a TTL and the cache won't reflect any potential
# changes in Stormpath fast enough.  Too low and the cache could evict too often, reducing performance.
## cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
## securityManager.cacheManager = $cacheManager

# My specific realm (see the Java class in the application) 
# If class not found => "ConfigurationException" in the console
fakeRealm = org.demo.auth.FakeRealm
fakeRealm2 = org.demo.auth.FakeRealm2
oauthRealm = org.demo.oauth.OAuthRealm  
# OAuthRealm not called !

# Configure a single realm to be used by the "security manager"
# securityManager.realm = $fakeRealm

# Configure multiple realms into Shiro’s Security Manager
# 1) Define the Authentication Strategy ( AtLeastOneSuccessfulStrategy is the default strategy )
# authcStrategy = org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
# authcStrategy = org.apache.shiro.authc.pam.FirstSuccessfulStrategy
# authcStrategy = org.apache.shiro.authc.pam.AllSuccessfulStrategy

# securityManager.authenticator.authenticationStrategy = $authcStrategy

# 2) Define all the Realms to be used 
# Shiro will try to authenticate with all the realms according with the "authentication strategy"
# It seems that all the realms are invoked (whatever strategy is defined)
# securityManager.realms= $fakeRealm, $fakeRealm2
securityManager.realms= $fakeRealm, $fakeRealm2, $oauthRealm
# if not set : auto setting of realms 

######################## URLS ########################
### 'urls' section : association URL - filter name
[urls]
/login.jsp = authc
/logout = logout

/private/** = authc
/private2/** = authc


# Other examples :
# /index.html = anon
# /user/create = anon
# /user/** = authc
# /account/** = ssl, authc
# /admin/** = authc, roles[administrator]
# /rest/** = authc, rest
# /remoting/rpc/** = authc, perms["remote:invoke"]

### Standard pre-defined filters :
# Filter Name	     Class
# anon               org.apache.shiro.web.filter.authc.AnonymousFilter
# authc              org.apache.shiro.web.filter.authc.FormAuthenticationFilter
# authcBasic         org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter
# logout             org.apache.shiro.web.filter.authc.LogoutFilter
# noSessionCreation  org.apache.shiro.web.filter.session.NoSessionCreationFilter
# perms              org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter
# port               org.apache.shiro.web.filter.authz.PortFilter
# rest               org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter
# roles              org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
# ssl                org.apache.shiro.web.filter.authz.SslFilter
# user               org.apache.shiro.web.filter.authc.UserFilter
